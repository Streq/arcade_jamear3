[gd_scene load_steps=18 format=2]

[ext_resource path="res://src/enemy/ghost/ghost.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/enemy/ghost/health.gd" type="Script" id=2]
[ext_resource path="res://src/enemy/ghost/hit_animation.gd" type="Script" id=3]
[ext_resource path="res://assets/audio/sfx/enemy_hit2.wav" type="AudioStream" id=4]
[ext_resource path="res://src/enemy/ghost/particles_on_dead.gd" type="Script" id=5]
[ext_resource path="res://src/enemy/ghost/particles/part_particles.tscn" type="PackedScene" id=6]
[ext_resource path="res://assets/shader/palette.gdshader" type="Shader" id=7]
[ext_resource path="res://src/color/palette.tscn" type="PackedScene" id=8]

[sub_resource type="Image" id=17]
data = {
"data": PoolByteArray( 255, 0, 0, 255, 255, 255, 255, 255 ),
"format": "RGBA8",
"height": 1,
"mipmaps": false,
"width": 2
}

[sub_resource type="ImageTexture" id=14]
flags = 0
flags = 0
image = SubResource( 17 )
size = Vector2( 2, 1 )

[sub_resource type="ShaderMaterial" id=12]
resource_local_to_scene = true
shader = ExtResource( 7 )
shader_param/palette_size = 2
shader_param/offset = 0
shader_param/blue_index_offset = 0.0
shader_param/palette = SubResource( 14 )

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
uniform int palette_size = 4;
uniform float offset : hint_range(0, 8, 1);
uniform sampler2D palette;

void fragment(){
	vec4 tex = texture(TEXTURE, UV);
	//used as index for the palette texture
	float blue_1 = tex.b;
	
	float palette_index = mod(blue_1 * (255.0) + offset+0.5,float(palette_size));
	float h_pixel_size = 1.0/float(palette_size);
	vec2 palette_pixel = vec2(palette_index*(h_pixel_size), 0.0);
	
	COLOR.rgb = texture(palette, palette_pixel).rgb;
	COLOR.a = tex.a;
	
}"

[sub_resource type="Image" id=18]
data = {
"data": PoolByteArray( 255, 0, 0, 255, 255, 0, 0, 255, 255, 255, 255, 255 ),
"format": "RGBA8",
"height": 1,
"mipmaps": false,
"width": 3
}

[sub_resource type="ImageTexture" id=16]
flags = 0
flags = 0
image = SubResource( 18 )
size = Vector2( 3, 1 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/palette_size = 3
shader_param/offset = 0.0
shader_param/palette = SubResource( 16 )

[sub_resource type="Animation" id=8]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:material:shader_param/offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("hit_sound:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("hitbox:monitoring")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("hitbox:monitorable")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}

[sub_resource type="Animation" id=9]
resource_name = "hit"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:material:shader_param/offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 2.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("hit_sound:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("hitbox:monitoring")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("hitbox:monitorable")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}

[node name="ghost" instance=ExtResource( 1 )]

[node name="Sprite" parent="out_of_sight_arrow/CanvasLayer/arrow" index="0"]
modulate = Color( 1, 1, 1, 1 )
material = SubResource( 12 )

[node name="palette" parent="out_of_sight_arrow/CanvasLayer/arrow/Sprite" index="0" instance=ExtResource( 8 )]
palette = PoolColorArray( 1, 0, 0, 1, 1, 1, 1, 1 )
material = SubResource( 12 )
glow = true
glow_speed = 4.0
string_val = "[\"ffff0000\",\"ffffffff\"]"

[node name="set_to_difficulty" parent="." index="4"]
min_value = 50.0

[node name="Sprite" parent="." index="5"]
material = SubResource( 4 )

[node name="hurtbox" parent="." index="6"]
collision_layer = 16
collision_mask = 0
monitoring = false

[node name="health" type="Node" parent="." index="11"]
script = ExtResource( 2 )

[node name="hit_animation" type="AnimationPlayer" parent="." index="12"]
anims/RESET = SubResource( 8 )
anims/hit = SubResource( 9 )
script = ExtResource( 3 )

[node name="hit_sound" type="AudioStreamPlayer2D" parent="." index="13"]
stream = ExtResource( 4 )
volume_db = -20.4573

[node name="particles_on_dead" type="Node" parent="." index="14"]
script = ExtResource( 5 )
PARTICLES = ExtResource( 6 )
material_owner_path = NodePath("../Sprite")

[connection signal="hit" from="hurtbox" to="health" method="_on_hit"]
[connection signal="hit" from="hurtbox" to="hit_animation" method="_on_hit"]
[connection signal="take_damage" from="hurtbox" to="health" method="_on_take_damage"]
[connection signal="take_knockback" from="hurtbox" to="hurt_handler" method="_on_take_knockback"]
[connection signal="dead" from="health" to="hit_animation" method="_on_dead"]
[connection signal="dead" from="health" to="particles_on_dead" method="trigger"]

[editable path="out_of_sight_arrow"]
