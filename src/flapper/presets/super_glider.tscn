[gd_scene load_steps=6 format=2]

[ext_resource path="res://src/flapper/flapper.tscn" type="PackedScene" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
uniform int palette_size = 4;
uniform float offset : hint_range(0, 8, 1);
uniform sampler2D palette;

void fragment(){
	vec4 tex = texture(TEXTURE, UV);
	//used as index for the palette texture
	float blue_1 = tex.b;
	
	float palette_index = mod(blue_1 * (255.0) + offset+0.5,float(palette_size));
	float h_pixel_size = 1.0/float(palette_size);
	vec2 palette_pixel = vec2(palette_index*(h_pixel_size), 0.0);
	
	COLOR.rgb = texture(palette, palette_pixel).rgb;
	COLOR.a = tex.a;
	
}"

[sub_resource type="Image" id=7]
data = {
"data": PoolByteArray( 0, 0, 0, 255, 0, 0, 0, 255, 255, 196, 0, 255, 255, 0, 0, 255 ),
"format": "RGBA8",
"height": 1,
"mipmaps": false,
"width": 4
}

[sub_resource type="ImageTexture" id=6]
flags = 0
flags = 0
image = SubResource( 7 )
size = Vector2( 4, 1 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/palette_size = 4
shader_param/offset = null
shader_param/palette = SubResource( 6 )

[node name="super_glider" instance=ExtResource( 1 )]
__meta__ = {
"_edit_pinned_properties_": [ "glide_opposite_break_threshold", "strong_flap", "weak_flap", "glide_break_threshold", "broken_glide_friction", "glide_friction", "animation_speed_multiplier", "custom_animation_lengths", "rotation_lerp", "air_friction", "gravity" ]
}
gravity = 200.0
air_friction = 0.0001
rotation_lerp = 8.0
strong_flap = 175.0
weak_flap = 125.0
glide_break_threshold = 200.0
glide_break_recovery_threshold = 135.0
glide_opposite_break_threshold = 100.0
glide_friction = 0.2
broken_glide_friction = 0.01
glide_opposite_friction = 0.2
broken_glide_opposite_friction = 0.0
animation_speed_multiplier = 2.0
custom_animation_lengths = {
"flap": -1.0,
"glide_flap": -1.0
}

[node name="Sprite" parent="." index="0"]
material = SubResource( 4 )
